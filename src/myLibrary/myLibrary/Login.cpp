// Login.cpp : 实现文件
//

#include "stdafx.h"
#include "myLibrary.h"
#include "afxdialogex.h"
#include "Query.h"
#include "Admin.h"
#include "Login.h"

int nowuid;

#ifdef _DEBUG
#define new DEBUG_NEW
#endif


// 用于应用程序“关于”菜单项的 CAboutDlg 对话框

class CAboutDlg : public CDialogEx
{
public:
	CAboutDlg();

// 对话框数据
	enum { IDD = IDD_ABOUTBOX };

	protected:
	virtual void DoDataExchange(CDataExchange* pDX);    // DDX/DDV 支持

// 实现
protected:
	DECLARE_MESSAGE_MAP()
};

CAboutDlg::CAboutDlg() : CDialogEx(CAboutDlg::IDD)
{
}

void CAboutDlg::DoDataExchange(CDataExchange* pDX)
{
	CDialogEx::DoDataExchange(pDX);
}

BEGIN_MESSAGE_MAP(CAboutDlg, CDialogEx)
END_MESSAGE_MAP()

// CLogin 对话框

IMPLEMENT_DYNAMIC(CLogin, CDialogEx)

CLogin::CLogin(CWnd* pParent /*=NULL*/)
	: CDialogEx(CLogin::IDD, pParent)
	, m_login_uid(1)
	, m_login_pwd(_T("123456"))
{
	m_hIcon = AfxGetApp()->LoadIcon(IDR_MAINFRAME);
}

CLogin::~CLogin()
{
}

void CLogin::DoDataExchange(CDataExchange* pDX)
{
	CDialogEx::DoDataExchange(pDX);
	DDX_Text(pDX, IDC_EDIT_AID, m_login_uid);
	DDX_Text(pDX, IDC_EDIT_PWD, m_login_pwd);
}


BEGIN_MESSAGE_MAP(CLogin, CDialogEx)
	ON_WM_SYSCOMMAND()
	ON_WM_PAINT()
	ON_WM_QUERYDRAGICON()
	ON_BN_CLICKED(IDC_gotoQ, &CLogin::OnBnClickedgotoq)
	ON_BN_CLICKED(IDC_login, &CLogin::OnBnClickedlogin)
	ON_BN_CLICKED(IDC_connect, &CLogin::OnBnClickedconnect)
	ON_BN_CLICKED(IDC_disconnect, &CLogin::OnBnClickeddisconnect)
END_MESSAGE_MAP()

// CLogin 消息处理程序

BOOL CLogin::OnInitDialog()
{
	CDialogEx::OnInitDialog();

	// 将“关于...”菜单项添加到系统菜单中。

	// IDM_ABOUTBOX 必须在系统命令范围内。
	ASSERT((IDM_ABOUTBOX & 0xFFF0) == IDM_ABOUTBOX);
	ASSERT(IDM_ABOUTBOX < 0xF000);

	CMenu* pSysMenu = GetSystemMenu(FALSE);
	if (pSysMenu != NULL)
	{
		BOOL bNameValid;
		CString strAboutMenu;
		bNameValid = strAboutMenu.LoadString(IDS_ABOUTBOX);
		ASSERT(bNameValid);
		if (!strAboutMenu.IsEmpty())
		{
			pSysMenu->AppendMenu(MF_SEPARATOR);
			pSysMenu->AppendMenu(MF_STRING, IDM_ABOUTBOX, strAboutMenu);
		}
	}

	// 设置此对话框的图标。当应用程序主窗口不是对话框时，框架将自动
	//  执行此操作
	SetIcon(m_hIcon, TRUE);			// 设置大图标
	SetIcon(m_hIcon, FALSE);		// 设置小图标

	// TODO: 在此添加额外的初始化代码

	return TRUE;  // 除非将焦点设置到控件，否则返回 TRUE
}

void CLogin::OnSysCommand(UINT nID, LPARAM lParam)
{
	if ((nID & 0xFFF0) == IDM_ABOUTBOX)
	{
		CAboutDlg dlgAbout;
		dlgAbout.DoModal();
	}
	else
	{
		CDialogEx::OnSysCommand(nID, lParam);
	}
}

// 如果向对话框添加最小化按钮，则需要下面的代码
//  来绘制该图标。对于使用文档/视图模型的 MFC 应用程序，
//  这将由框架自动完成。

void CLogin::OnPaint()
{
	if (IsIconic())
	{
		CPaintDC dc(this); // 用于绘制的设备上下文

		SendMessage(WM_ICONERASEBKGND, reinterpret_cast<WPARAM>(dc.GetSafeHdc()), 0);

		// 使图标在工作区矩形中居中
		int cxIcon = GetSystemMetrics(SM_CXICON);
		int cyIcon = GetSystemMetrics(SM_CYICON);
		CRect rect;
		GetClientRect(&rect);
		int x = (rect.Width() - cxIcon + 1) / 2;
		int y = (rect.Height() - cyIcon + 1) / 2;

		// 绘制图标
		dc.DrawIcon(x, y, m_hIcon);
	}
	else
	{
		CDialogEx::OnPaint();
	}
}

//当用户拖动最小化窗口时系统调用此函数取得光标
//显示。
HCURSOR CLogin::OnQueryDragIcon()
{
	return static_cast<HCURSOR>(m_hIcon);
}

//void CLogin::OnOK(){}
//void CLogin::OnCANCEL(){}


void CLogin::OnBnClickedgotoq()
{
		CQuery queryDlg;
		queryDlg.DoModal();
}


void CLogin::OnBnClickedlogin()
{
	// TODO: 在此添加控件通知处理程序代码
	CRecordset m_set(&m_db);
	CDBVariant var;
	CString query;
	int count = 0;

	UpdateData(TRUE); 

	nowuid = m_login_uid;
	if(!(!m_db.IsOpen() && !m_db.OpenEx(_T("DSN=mydb;DATABASE=Library;UID=admin;PWD=admin"), 
		CDatabase::noOdbcDialog)))
	{
		if(m_login_uid != 0 && m_login_pwd != "")
		{ 
			query.Format(_T("select * from lib_admin where lib_aid = %d and lib_psw = '%s'"),
				m_login_uid, m_login_pwd);
			m_set.Open(CRecordset::forwardOnly,query,CRecordset::readOnly);	
			while(!m_set.IsEOF())
			{
				m_set.MoveNext();
				count++;
			}
			if(count>0)
			{
				CAdmin adminDlg;
				adminDlg.DoModal();
			}
			else
			{
				MessageBox(_T("用户名或密码错误！"));
			}
		}
		else
		{
			MessageBox(_T("用户名或密码错误！"));
		}
	}


}


void CLogin::OnBnClickedconnect()
{
	// TODO: 在此添加控件通知处理程序代码
	if(!m_db.IsOpen() && !m_db.OpenEx(_T("DSN=mydb;UID=admin;PWD=admin"), 
			CDatabase::noOdbcDialog))
	{
		MessageBox(_T("连接错误！"));
		return;
	}
	else
	{
		MessageBox(_T("连接成功！"));
		return;
	}
}

void CLogin::OnBnClickeddisconnect()
{
	// TODO: 在此添加控件通知处理程序代码
	if(!m_db.IsOpen())
	{
		MessageBox(_T("未连接数据库！"));
		return;
	}
	m_db.Close();
	if(!m_db.IsOpen())
	{
		MessageBox(_T("断开成功！"));
		return;
	}
	else
	{
		MessageBox(_T("断开失败！"));
		return;
	}
}
